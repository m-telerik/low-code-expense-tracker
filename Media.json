```json
{
  "createdAt": "",
  "updatedAt": "",
  "id": "",
  "name": "3.Media",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "operation": "binaryToPropery",
        "destinationKey": "image_base64",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -336,
        800
      ],
      "id": "",
      "name": "Extract from File",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "HTTP-Referer",
              "value": "https://cashie.app"
            },
            {
              "name": "X-Title",
              "value": "Cashie OCR"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -112,
        800
      ],
      "id": "9fc8873c-f91e-4707-8b35-b20a43f98f42",
      "name": "OR/gemini",
      "retryOnFail": true,
      "credentials": {
        "httpBearerAuth": {
          "id": "",
          "name": ""
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c832c237-d075-45b3-9cdb-d81242cba1a0",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        112,
        192
      ],
      "id": "3d142b8c-6976-4c51-adb0-d363cc644213",
      "name": "audio-to-text"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node \"parse-gemini-receipt\"\n// Robustly parse JSON from LLM output that may be wrapped in ```json fences or mixed text.\nfunction extractJsonString(s) {\n  if (typeof s !== 'string') return '';\n  const trimmed = s.trim();\n  // 1) Prefer fenced code block: ```json ... ``` or ``` ... ```\n  const fence = trimmed.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/i);\n  if (fence && fence[1]) return fence[1].trim();\n  // 2) Fall back to first {...} block in the string\n  const brace = trimmed.match(/\\{[\\s\\S]*\\}/);\n  if (brace && brace[0]) return brace[0].trim();\n  // 3) Nothing usable\n  return '';\n}\n\n// Получаем контент из ответа\nconst raw = $json?.choices?.[0]?.message?.content ?? '';\n\n// Попробуем извлечь JSON\nconst jsonStr = extractJsonString(raw);\nlet obj = {};\n\n// Если есть JSON-строка, парсим её\nif (jsonStr) {\n  try {\n    obj = JSON.parse(jsonStr);\n  } catch (e) {\n    console.log('JSON parse error:', e.message);\n    obj = {};\n  }\n}\n\n// Если JSON успешно распарсился и содержит данные чека\nif (obj.total || obj.merchant || obj.currency) {\n  // Normalize fields\n  const total = Number(obj.total);\n  const totalNorm = Number.isFinite(total) ? total : null;\n  const currency = typeof obj.currency === 'string' ? obj.currency.trim().toUpperCase() : null;\n  const merchant = typeof obj.merchant === 'string' ? obj.merchant.trim() : '';\n  \n  // Synthesize a compact text for downstream agent\n  const parts = [];\n  if (merchant) parts.push(merchant);\n  if (totalNorm !== null) parts.push(totalNorm);\n  if (currency) parts.push(currency);\n  const text = parts.length ? parts.join(' ') + ' (receipt)' : '';\n  \n  return {\n    json: {\n      text,\n      ocr: obj,\n    },\n  };\n} else {\n  // Если JSON не найден или не содержит данных чека, возвращаем исходный текст\n  return {\n    json: {\n      text: raw || 'No content received',\n      ocr: {},\n      raw_response: raw\n    },\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        112,
        720
      ],
      "id": "5772dad0-9969-4f7b-a995-6695e4f62017",
      "name": "parse-gemini-receipt"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.response_metadata.input_type }}",
                    "rightValue": "voice",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "fff446f6-0a7a-453a-a34d-020196e785d1"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "voice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6980d1e1-064f-459c-ac5f-b11db2330c1e",
                    "leftValue": "={{ $json.response_metadata.input_type }}",
                    "rightValue": "=photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1008,
        512
      ],
      "id": "a37bced9-6a91-4483-b518-1678de79c24c",
      "name": "Switch"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.response_metadata.file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -336,
        464
      ],
      "id": "44c0b4e9-7a43-4123-a4bf-17342091825f",
      "name": "download-voice",
      "webhookId": "c0358bdb-2b4c-4749-82c5-e2174feb16da",
      "alwaysOutputData": false,
      "credentials": {
        "telegramApi": {
          "id": "",
          "name": ""
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.response_metadata.file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -560,
        800
      ],
      "id": "67460011-4b24-4d80-bcc4-277a6e8acf94",
      "name": "download-image",
      "webhookId": "c0358bdb-2b4c-4749-82c5-e2174feb16da",
      "alwaysOutputData": false,
      "credentials": {
        "telegramApi": {
          "id": "",
          "name": ""
        }
      }
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "type"
            },
            {
              "name": "content"
            },
            {
              "name": "response_metadata",
              "type": "any"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1680,
        800
      ],
      "id": "487d7dcd-3329-4e02-9806-96547f744c46",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1360,
        528
      ],
      "id": "0ced9605-192d-430a-a2e1-d016afcb20d8",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node (JavaScript)\n// Приводим к формату памяти: { type, content, response_metadata }\n// content = значение из text (если есть)\n\nreturn $input.all().map(item => {\n  const j = item.json ?? {};\n\n  // Забираем поля\n  let { type, content, response_metadata, text, ...rest } = j;\n\n  // type по умолчанию\n  if (!type) type = 'human';\n\n  // response_metadata — всегда объект\n  if (!response_metadata || typeof response_metadata !== 'object' || Array.isArray(response_metadata)) {\n    response_metadata = {};\n  }\n\n  // Сливаем остальные верхнеуровневые поля в response_metadata\n  for (const [k, v] of Object.entries(rest)) {\n    if (!(k in response_metadata)) {\n      response_metadata[k] = v;\n    }\n  }\n\n  // Заменяем content на text, если есть\n  if (typeof text === 'string' && text.trim() !== '') {\n    content = text.trim();\n  } else if (!content) {\n    content = '';\n  }\n\n  return {\n    json: {\n      type,\n      content,\n      response_metadata\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        192
      ],
      "id": "62aac9c4-732b-4b19-8470-89a588c59bb1",
      "name": "to-memory-format"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        336,
        192
      ],
      "id": "38fe1989-5e63-4ff9-ab57-b42a40bb8756",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "806ccf75-367f-41b9-b3e1-d173a10f1da6",
              "name": "type",
              "value": "={{ $json.type }}",
              "type": "string"
            },
            {
              "id": "c6d5ad7d-51ef-419c-bfc0-6f77286e31aa",
              "name": "content",
              "value": "={{ $json.content }}",
              "type": "string"
            },
            {
              "id": "9730e938-2e4a-4b87-a926-7cdb26fb14cd",
              "name": "response_metadata",
              "value": "={{ $json.response_metadata }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        112,
        0
      ],
      "id": "d67924cc-020b-470c-a022-ff94ea498e14",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "inputText": "={{ $json.content }}",
        "categories": {
          "categories": [
            {
              "category": "TXN",
              "description": "Financial transactions - single or multiple. Single: 'кофе 120 бат', 'coffee 5 USD', 'обед 250₽' ... [REDACTED]"
            },
            {
              "category": "MultiTXN",
              "description": "Multi financial transactions separated with comma and other symbols: 'кофе 120 бат, такси 300 бат', 'coffee 5 USD, 15 euros'... [REDACTED]"
            }
          ]
        },
        "options": {
          "fallback": "other"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1.1,
      "position": [
        784,
        80
      ],
      "id": "d0026d08-f3d1-4921-94d9-f72b71ca273e",
      "name": "Text Classifier"
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные\nconst inputData = $input.all();\n\n// Обрабатываем каждый элемент входных данных\nconst outputData = inputData.map(item => {\n  const data = item.json;\n  \n  // Проверяем, есть ли массив photo в message\n  if (!data.response_metadata?.message?.photo || !Array.isArray(data.response_metadata.message.photo)) {\n    // Если нет массива photo, возвращаем данные как есть\n    return { json: data };\n  }\n  \n  const photos = data.response_metadata.message.photo;\n  \n  // Находим фото с максимальным file_size\n  let largestPhoto = photos[0];\n  \n  for (let i = 1; i < photos.length; i++) {\n    if (photos[i].file_size > largestPhoto.file_size) {\n      largestPhoto = photos[i];\n    }\n  }\n  \n  // Создаем копию исходных данных\n  const result = { ...data };\n  \n  // Обновляем file_id и file_unique_id только в response_metadata\n  result.response_metadata.file_id = largestPhoto.file_id;\n  result.response_metadata.file_unique_id = largestPhoto.file_unique_id;\n  \n  // Удаляем массив photo, оставляя только данные самого большого файла\n  delete result.response_metadata.message.photo;\n  \n  // Удаляем дублирующиеся поля на корневом уровне, если они есть\n  delete result.file_id;\n  delete result.file_unique_id;\n  \n  return { json: result };\n});\n\nreturn outputData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -784,
        800
      ],
      "id": "ee0da079-0e3e-425e-a15d-3593010e29c7",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -112,
        464
      ],
      "id": "3fb4ad48-3be0-43fe-b590-ee492c7de959",
      "name": "Transcribe a recording/whisper",
      "credentials": {
        "openAiApi": {
          "id": "",
          "name": ""
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": "openai/gpt-4o-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        864,
        336
      ],
      "id": "e128d8f5-09dc-4eed-9379-74454cb19ce3",
      "name": "gpt-4o-mini",
      "credentials": {
        "openRouterApi": {
          "id": "",
          "name": ""
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultName": "0.Error"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "type": "=cashie-media",
            "response_metadata": "={{ $json.output }}",
            "content": "=Whisper fail (OpenAI). Couldn’t parse voice."
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "response_metadata",
              "displayName": "response_metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        848,
        576
      ],
      "id": "467cfef1-ac7d-4b24-bfc5-b699f05239fc",
      "name": "🆘 Call Error: Whisper fail (OpenAI)"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultName": "0.Error"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "type": "=cashie-media",
            "response_metadata": "={{ $json.output }}",
            "content": "=OCR fail (OpenRouter). Couldn’t parse receipt"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "response_metadata",
              "displayName": "response_metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        848,
        864
      ],
      "id": "60bd46aa-2b2f-4448-83d9-c34a0ed13322",
      "name": "🆘 Call Error: OCR fail (OpenRouter)"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultUrl": "/workflow/",
          "cachedResultName": "3.Transactions"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "type": "={{ $json.type }}",
            "content": "={{ $json.content }}",
            "response_metadata": "={{ $json.response_metadata }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "response_metadata",
              "displayName": "response_metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1136,
        0
      ],
      "id": "06a62017-bdeb-44b0-becf-e69b3232dacb",
      "name": "💰 Call Cashie.Transaction"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultName": "7.Reply"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "type": "={{ $json.type }}",
            "content": "=Couldn’t read the receipt 😕 Try sending it again — no glare, full view, and a clear background.",
            "response_metadata": "={{ $json.response_metadata }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "response_metadata",
              "displayName": "response_metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1136,
        864
      ],
      "id": "c76fa18e-e11b-4a60-89c1-6666443e4996",
      "name": "💬 Couldn’t read the receipt"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultName": "7.Reply"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "type": "={{ $json.type }}",
            "content": "=Didn’t quite get that transaction. Could you resend it?",
            "response_metadata": "={{ $json.response_metadata }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "response_metadata",
              "displayName": "response_metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1136,
        384
      ],
      "id": "fa91a61d-1cf4-48f0-9bd3-ace829eef742",
      "name": "💬 Didn’t quite get that transaction."
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultName": "8.Reply"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "type": "={{ $json.type }}",
            "content": "=🚧 Support for PDFs is coming soon.",
            "response_metadata": "={{ $json.response_metadata }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "response_metadata",
              "displayName": "response_metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -1008,
        944
      ],
      "id": "90dc4d2d-10e3-40d0-a1d9-96367a9f1b9f",
      "name": "💬 🚧 Support for PDFs is coming soon."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b4b4490b-05de-478b-8528-e578f025d442",
              "leftValue": "={{ $json.response_metadata.plan }}",
              "rightValue": "pro",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1456,
        800
      ],
      "id": "fa003732-cf72-4837-8ee1-dd3792143ddf",
      "name": "pro?"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultName": "7.Reply"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "content": "📸 Media features (photos & voice) are part of Cashie Pro. Upgrade to unlock them 🎉",
            "type": "={{ $json.type }}",
            "response_metadata": "={{ $json.response_metadata }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "response_metadata",
              "displayName": "response_metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -1008,
        1136
      ],
      "id": "52d7079c-4e9a-4ff3-9d5b-8c3fab330994",
      "name": "📸 Media features (like photos & voice) are part of Cashie Pro."
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -784,
        1136
      ],
      "id": "50e10f39-6210-48b8-bea2-2d4098f065d8",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4dae629e-4020-4c6c-bde2-15773f9d9276",
              "leftValue": "={{ $json.response_metadata.input_type }}",
              "rightValue": "doc",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1232,
        704
      ],
      "id": "34565494-e0f8-4709-af1e-b66afb83f9e9",
      "name": "not-doc?"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultName": "7.Reply"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "type": "={{ $json.type }}",
            "content": "=There is a problem with voice recognition. Please try again.",
            "response_metadata": "={{ $json.response_metadata }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "response_metadata",
              "displayName": "response_metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1136,
        576
      ],
      "id": "400ed129-586d-4d42-96f0-423d493d22e7",
      "name": "💬 problem with voice recognition"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultUrl": "/workflow/",
          "cachedResultName": "7.Reply"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "type": "={{ $json.type }}",
            "content": "=Record is longer than 15 sec.",
            "response_metadata": "={{ $json }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "response_metadata",
              "displayName": "response_metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1136,
        1056
      ],
      "id": "5171d459-2cb7-4a47-b071-cebac2b3bec8",
      "name": "💬 problem with voice recognition1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultUrl": "/workflow/",
          "cachedResultName": "0.Error"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "type": "=cashie-media",
            "response_metadata": "={{ $json }}",
            "content": "=Record is longer than 15 sec."
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "response_metadata",
              "displayName": "response_metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        848,
        1056
      ],
      "id": "c808d9dd-5693-4bf4-b730-9aa928cac5ee",
      "name": "🆘 Call Error: too long duration"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultUrl": "/workflow/",
          "cachedResultName": "multiTXN"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "type": "={{ $json.type }}",
            "content": "={{ $json.content }}",
            "response_metadata": "={{ $json.response_metadata }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "response_metadata",
              "displayName": "response_metadata",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.3,
      "position": [
        1136,
        192
      ],
      "id": "2ba9cb2e-9ade-458b-bfbf-3f1ce05d3358",
      "name": "Call 'multiTXN'"
    }
  ],
  "connections": {
    "Extract from File": {
      "main": [
        [
          {
            "node": "OR/gemini",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OR/gemini": {
      "main": [
        [
          {
            "node": "parse-gemini-receipt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "🆘 Call Error: OCR fail (OpenRouter)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "audio-to-text": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "parse-gemini-receipt": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "download-voice",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "download-voice": {
      "main": [
        [
          {
            "node": "Transcribe a recording/whisper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "download-image": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "pro?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "to-memory-format": {
      "main": [
        [
          {
            "node": "Text Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "to-memory-format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Classifier": {
      "main": [
        [
          {
            "node": "💰 Call Cashie.Transaction",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call 'multiTXN'",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "💬 Didn’t quite get that transaction.",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "download-image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe a recording/whisper": {
      "main": [
        [
          {
            "node": "audio-to-text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "🆘 Call Error: Whisper fail (OpenAI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gpt-4o-mini": {
      "ai_languageModel": [
        [
          {
            "node": "Text Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "🆘 Call Error: Whisper fail (OpenAI)": {
      "main": [
        [
          {
            "node": "💬 problem with voice recognition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🆘 Call Error: OCR fail (OpenRouter)": {
      "main": [
        [
          {
            "node": "💬 Couldn’t read the receipt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💰 Call Cashie.Transaction": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💬 Couldn’t read the receipt": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💬 Didn’t quite get that transaction.": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💬 🚧 Support for PDFs is coming soon.": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pro?": {
      "main": [
        [
          {
            "node": "not-doc?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "📸 Media features (like photos & voice) are part of Cashie Pro.",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📸 Media features (like photos & voice) are part of Cashie Pro.": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "not-doc?": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "💬 🚧 Support for PDFs is coming soon.",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💬 problem with voice recognition": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "🆘 Call Error: too long duration": {
      "main": [
        [
          {
            "node": "💬 problem with voice recognition1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "💬 problem with voice recognition1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call 'multiTXN'": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
